openapi: 3.0.0
servers:
  - url: '35.233.79.129:80'
info:
  title: PIVO games backend API
  version: '1.1'
  license:
    name: MIT
  description: PIVO Games back-end API
  contact:
    name: Vladyslav Bushynskyi
paths:
  /auth:
    post:
      summary: ''
      operationId: auth-user
      responses:
        '200':
          description: OK
      description: User logi in system
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 1
              required:
                - name
                - password
  '/user/{userName}':
    parameters:
      - schema:
          type: string
        name: userName
        in: path
        required: true
        description: require
    get:
      summary: Get User Endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  username:
                    type: string
                    minLength: 1
                  profile:
                    type: string
                    minLength: 1
                  email:
                    type: string
                    minLength: 1
                required:
                  - username
                  - profile
                  - email
            application/xml:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-user-userName
      description: Get current user by name
      parameters:
        - schema:
            type: string
          in: header
          name: token
          description: Auth token
  '/user/{userName}/profile':
    parameters:
      - schema:
          type: string
        name: userName
        in: path
        required: true
    get:
      summary: Get User profile
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  username:
                    type: string
                    minLength: 1
                  profile:
                    type: string
                    minLength: 1
                  email:
                    type: string
                    minLength: 1
                required:
                  - username
                  - profile
                  - email
            application/xml:
              schema:
                type: object
                properties: {}
      operationId: get-user-userName-profile
      description: Gets user's Profile
      parameters:
        - schema:
            type: string
          in: header
    put:
      summary: ''
      operationId: put-user-userName-profile
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Update user's Profile
      parameters:
        - schema:
            type: string
          in: header
          name: token
          description: ''
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                profile:
                  type: string
                  minLength: 1
              required:
                - profile
  '/user/{userName}/profile/statistics':
    parameters:
      - schema:
          type: string
        name: userName
        in: path
        required: true
    get:
      summary: Get user Stats
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BrainstormStats'
                  - $ref: '#/components/schemas/CrosswordsStats'
                  - $ref: '#/components/schemas/SongStats'
        '':
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: get-user-usernamr-profile-statistics
      description: Getting statistics of the current user
      parameters:
        - schema:
            type: string
          in: query
          name: gameName
          description: Name of the game to query stats from.
    put:
      summary: Update user Stats
      operationId: put-user-username-profile-statistics
      responses:
        '201':
          description: Updated
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CrosswordsStats'
                - $ref: '#/components/schemas/BrainstormStats'
                - $ref: '#/components/schemas/SongStats'
          application/xml:
            schema:
              type: object
              properties: {}
        description: ''
      description: Ð¡hanging statistics of the current user
      parameters:
        - schema:
            type: string
          in: header
          name: token
  /generator:
    get:
      summary: Game generator
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CrosswordGame'
                  - $ref: '#/components/schemas/BrainstormGame'
                  - $ref: '#/components/schemas/SongGame'
      operationId: get-generator-brainstorm
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                difficulty:
                  type: string
                categories:
                  type: array
                  items:
                    type: string
                numOfQuestions:
                  type: integer
                multiplayerSettings:
                  type: object
                  properties:
                    otherPlayerId:
                      type: string
                    mode:
                      type: string
                  required:
                    - otherPlayerId
                    - mode
                game:
                  type: string
              required:
                - difficulty
                - categories
                - numOfQuestions
                - game
    parameters: []
components:
  schemas:
    User:
      title: User
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
        profileId:
          type: string
        password:
          type: string
      required:
        - id
        - name
        - email
        - role
        - profileId
        - password
      x-examples: {}
    Profile:
      title: Profile
      type: object
      properties:
        id:
          type: string
        crosswordStatsId:
          type: string
        brainstormStatsId:
          type: string
        songStatsId:
          type: string
        avatarUrl:
          type: string
    CrosswordsStats:
      title: CrosswordsStats
      type: object
      properties:
        id:
          type: string
    BrainstormStats:
      title: BrainstormStats
      type: object
      properties:
        id:
          type: string
    SongStats:
      title: SongStats
      type: object
      properties:
        id:
          type: string
    CrosswordGame:
      title: CrosswordGame
      type: object
      properties:
        id:
          type: string
    BrainstormGame:
      title: BrainstormGame
      type: object
      properties:
        id:
          type: string
    SongGame:
      title: SongGame
      type: object
      properties:
        id:
          type: string
  securitySchemes: {}
